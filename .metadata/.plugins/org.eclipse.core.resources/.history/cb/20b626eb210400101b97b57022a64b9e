package com.jose.demo.models.entities;


import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.jose.demo.mappers.ProductoMapper;
import com.jose.demo.services.IService;
import com.jose.demo.services.Producto;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;

@Entity
@Table(name="PRODUCTOS_TEMPORAL")
public class ProductoServiceImpl implements IService<Productos> {
	@Id
	@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="TEST_SEQ")
	@SequenceGenerator(name="TEST_SEQ",sequenceName="TEST_SEQ",allocationSize=1)
	@Column(name="ID_PRODUCTO")
	private Long id;
	
	@Column(name="NOMBRE")
	private String nombre;
	
	@Column(name="DESCRIPCION")
	private String descripcion;
	
	@Column(name="STOCK")
	private int stock;
	
	@Column(name="FECHA_CREACION",updatable=false)
	private Date fechaCreacion;
	
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="ID_CATEGORIA")
	@JsonIgnoreProperties({"hibernateLazyInitializar","handle"})
	private Categoria categoria;
	
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getDescripcion() {
		return descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	public int getStock() {
		return stock;
	}

	public void setStock(int stock) {
		this.stock = stock;
	}
	
	public Date getFechaCreacion() {
		return fechaCreacion;
	}
	public Categoria getCategoria() {
		return categoria;
	}

	public void setCategoria(Categoria categoria) {
		this.categoria = categoria;
	}

	public void setFechaCreacion(Date fechaCreacion) {
		this.fechaCreacion = fechaCreacion;
	}
	

	@PrePersist
	public void prePersist() {
		this.fechaCreacion= new Date();
		
	}

	@Override
	public List<Productos> listar() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Page<Productos> listar(Pageable page) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Optional<Productos> obtenerPorId(Long id) {
		// TODO Auto-generated method stub
		return Optional.empty();
	}

	@Override
	public Productos crear(Productos entity) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transactional
	public Productos editar(Producto producto, Long id) {
		
	}
	

	@Override
	@Transactional
	public Productos eliminar(Long id) {
		Optional<Producto> optProducto =repository.findById(id);
		if(optProducto.isPresent()) {
			repository.deleteById(id);
			return optProducto.get();
		}
	return null;
	}
	public Producto crearDto(ProductoDTO dto) {
		Producto producto= ProductoMapper.dtoToEntity(dto,categoriaRepository);
		return crear(producto);
	}
}
